{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template vpc_single_instance_in_subnet.template: Sample template showing how to create a VPC and add an EC2 instance with an Elastic IP address and a security group. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
      "Stage": {
        "Type": "String",
        "Description": "Name of an Environment stage."
      }
    },
    "Resources": {
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.16.0.0/16",
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            },
            {
              "Key": "Name",
              "Value": {
                "Ref": "Stage"
              }
            }
          ]
        }
      },
      "Subnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "CidrBlock": "10.16.1.0/24",
          "AvailabilityZone": {
            "Fn::Select": [
              "1",
              {
                "Fn::GetAZs": ""
              }
            ]
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "Subnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "CidrBlock": "10.16.2.0/24",
          "AvailabilityZone": {
            "Fn::Select": [
              "2",
              {
                "Fn::GetAZs": ""
              }
            ]
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "Subnet3": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "CidrBlock": "10.16.3.0/24",
          "AvailabilityZone": {
            "Fn::Select": [
              "0",
              {
                "Fn::GetAZs": ""
              }
            ]
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "Route": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "AttachGateway",
        "Properties": {
          "RouteTableId": {
            "Ref": "RouteTable"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "Subnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet1"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
        }
      },
      "Subnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet2"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
        }
      },
      "Subnet3RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet3"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
        }
      },
      "NetworkAcl": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        }
      },
      "InboundResponsePortsNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "NetworkAcl"
          },
          "RuleNumber": "102",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "0",
            "To": "65535"
          }
        }
      },
      "OutBoundResponsePortsNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "NetworkAcl"
          },
          "RuleNumber": "102",
          "Protocol": "6",
          "RuleAction": "allow",
          "Egress": "true",
          "CidrBlock": "0.0.0.0/0",
          "PortRange": {
            "From": "0",
            "To": "65535"
          }
        }
      },
      "Subnet1NetworkAclAssociation": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet1"
          },
          "NetworkAclId": {
            "Ref": "NetworkAcl"
          }
        }
      },
      "Subnet2NetworkAclAssociation": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet2"
          },
          "NetworkAclId": {
            "Ref": "NetworkAcl"
          }
        }
      },
      "Subnet3NetworkAclAssociation": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "Subnet2"
          },
          "NetworkAclId": {
            "Ref": "NetworkAcl"
          }
        }
      },
      "SSMVPC": {
        "Type": "AWS::SSM::Parameter",
        "Properties": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                "eigen",
                "vpc",
                {
                  "Ref": "Stage"
                }
              ]
            ]
          },
          "Type": "String",
          "Value": {
            "Ref": "VPC"
          },
          "Description": "Eigen VPC Id"
        }
      },
      "SSMSubnet": {
        "Type": "AWS::SSM::Parameter",
        "Properties": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                "eigen",
                "subnets",
                {
                  "Ref": "Stage"
                }
              ]
            ]
          },
          "Type": "StringList",
          "Value": {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "Subnet1"
                },
                {
                  "Ref": "Subnet2"
                },
                {
                  "Ref": "Subnet3"
                }
              ]
            ]
          },
          "Description": "Eigen Subnets."
        }
      }
    },
    "Outputs": {}
  }