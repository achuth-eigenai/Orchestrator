{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "Stage": {
        "Type": "String",
        "Description": "Name of an Environment stage."
      },
      "Version": {
        "Type": "String",
        "Description": "Version of the release",
        "Default": "latest"
      },
      "KeyName": {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
      },
      "AccountId": {
        "Type": "String",
        "Description": "Account Id."
      },
      "SubnetId": {
        "Type": "AWS::SSM::Parameter::Value<List<String>>",
        "Default": "eigen-subnets-prod"
      },
      "VpcId": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "eigen-vpc-prod"
      },
      "InstanceType": {
        "Description": "EC2 instance type",
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": [
          "t2.micro",
          "t2.small",
          "t2.medium",
          "t2.large",
          "t3.small",
          "t3.medium",
          "t3.large",
          "t3.xlarge",
          "t3a.small",
          "t3a.medium",
          "t3a.large",
          "t3a.xlarge"
        ],
        "ConstraintDescription": "Please choose a valid instance type."
      }
    },
    "Mappings": {
      "StageConfiguration": {
        "uat": {
          "Memory": 950,
          "InstanceType": "t3a.small",
          "MinSize": "1",
          "DesiredCapacity": "1",
          "MaxSize": "1"
        },
        "prod": {
          "Memory": 1900,
          "InstanceType": "t3a.medium",
          "MinSize": "1",
          "DesiredCapacity": "1",
          "MaxSize": "2"
        }
      },
      "AWSRegionToAMI": {
        "us-east-1": {
          "AMIID": "ami-09bee01cc997a78a6"
        },
        "us-east-2": {
          "AMIID": "ami-0a9e12068cb98a01d"
        },
        "us-west-1": {
          "AMIID": "ami-0fa6c8d131a220017"
        },
        "us-west-2": {
          "AMIID": "ami-078c97cf1cefd1b38"
        },
        "eu-west-1": {
          "AMIID": "ami-0c9ef930279337028"
        },
        "eu-central-1": {
          "AMIID": "ami-065c1e34da68f2b02"
        },
        "ap-northeast-1": {
          "AMIID": "ami-02265963d1614d04d"
        },
        "ap-southeast-1": {
          "AMIID": "ami-095997bc097212f6f"
        },
        "ap-southeast-2": {
          "AMIID": "ami-00e4b147599c13588"
        }
      }
    },
    "Resources": {
      "ECSCluster": {
        "Type": "AWS::ECS::Cluster"
      },
      "EcsSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "ECS Security Group",
          "VpcId": {
            "Ref": "VpcId"
          }
        }
      },
      "EcsSecurityGroupHTTPinbound": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EcsSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "EcsSecurityGroupAppHTTPinbound": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EcsSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "8080",
          "ToPort": "8080",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "EcsSecurityGroupSSHinbound": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EcsSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "EcsSecurityGroupALBports": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "EcsSecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "31000",
          "ToPort": "61000",
          "SourceSecurityGroupId": {
            "Ref": "EcsSecurityGroup"
          }
        }
      },
      "CloudwatchLogsGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "LogGroupName": {
            "Fn::Join": [
              "-",
              [
                "ECSLogGroup",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "RetentionInDays": 7
        }
      },
      "taskdefinition": {
        "Type": "AWS::ECS::TaskDefinition",
        "Properties": {
          "Family": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "-ecs-demo-app"
              ]
            ]
          },
          "ContainerDefinitions": [
            {
              "Name": {
                "Fn::Join": [
                  "-",
                  [
                    "procyon",
                    {
                      "Ref": "Stage"
                    }
                  ]
                ]
              },
              "Cpu": "1024",
              "Essential": "true",
              "Image": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AccountId"
                    },
                    ".dkr.ecr.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".amazonaws.com/eigen-procyon-",
                    {
                      "Ref": "Stage"
                    },
                    ":",
                    {
                      "Ref": "Version"
                    }
                  ]
                ]
              },
              "Environment": [
                {
                  "Name": "stage",
                  "Value": {
                    "Ref": "Stage"
                  }
                }
              ],
              "Memory": {
                "Fn::FindInMap": [
                  "StageConfiguration",
                  {
                    "Ref": "Stage"
                  },
                  "Memory"
                ]
              },
              "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": {
                    "Ref": "CloudwatchLogsGroup"
                  },
                  "awslogs-region": {
                    "Ref": "AWS::Region"
                  },
                  "awslogs-stream-prefix": "ecs-demo-app"
                }
              },
              "MountPoints": [
                {
                  "ContainerPath": "/usr/local/apache2/htdocs",
                  "SourceVolume": "my-vol"
                }
              ],
              "PortMappings": [
                {
                  "ContainerPort": 8080
                }
              ]
            }
          ],
          "Volumes": [
            {
              "Name": "my-vol"
            }
          ]
        }
      },
      "ECSALB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                "ECSALB",
                {
                  "Ref": "Stage"
                }
              ]
            ]
          },
          "Scheme": "internet-facing",
          "LoadBalancerAttributes": [
            {
              "Key": "idle_timeout.timeout_seconds",
              "Value": "30"
            }
          ],
          "Subnets": {
            "Ref": "SubnetId"
          },
          "SecurityGroups": [
            {
              "Ref": "EcsSecurityGroup"
            }
          ]
        }
      },
      "ALBListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "DependsOn": "ECSServiceRole",
        "Properties": {
          "DefaultActions": [
            {
              "Type": "forward",
              "TargetGroupArn": {
                "Ref": "ECSTG"
              }
            }
          ],
          "LoadBalancerArn": {
            "Ref": "ECSALB"
          },
          "Port": "80",
          "Protocol": "HTTP"
        }
      },
      "ECSALBListenerRule": {
        "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
        "DependsOn": "ALBListener",
        "Properties": {
          "Actions": [
            {
              "Type": "forward",
              "TargetGroupArn": {
                "Ref": "ECSTG"
              }
            }
          ],
          "Conditions": [
            {
              "Field": "path-pattern",
              "Values": [
                "/"
              ]
            }
          ],
          "ListenerArn": {
            "Ref": "ALBListener"
          },
          "Priority": 1
        }
      },
      "ECSTG": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "DependsOn": "ECSALB",
        "Properties": {
          "HealthCheckIntervalSeconds": 120,
          "HealthCheckPath": "/actuator/health",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckTimeoutSeconds": 10,
          "HealthyThresholdCount": 2,
          "Name": {
            "Fn::Join": [
              "-",
              [
                "ECSTG",
                {
                  "Ref": "Stage"
                }
              ]
            ]
          },
          "Port": 8080,
          "Protocol": "HTTP",
          "UnhealthyThresholdCount": 2,
          "VpcId": {
            "Ref": "VpcId"
          }
        }
      },
      "ECSAutoScalingGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "VPCZoneIdentifier": {
            "Ref": "SubnetId"
          },
          "LaunchConfigurationName": {
            "Ref": "ContainerInstances"
          },
          "MinSize": {
            "Fn::FindInMap": [
              "StageConfiguration",
              {
                "Ref": "Stage"
              },
              "MinSize"
            ]
          },
          "MaxSize": {
            "Fn::FindInMap": [
              "StageConfiguration",
              {
                "Ref": "Stage"
              },
              "MaxSize"
            ]
          },
          "DesiredCapacity": {
            "Fn::FindInMap": [
              "StageConfiguration",
              {
                "Ref": "Stage"
              },
              "DesiredCapacity"
            ]
          }
        },
        "CreationPolicy": {
          "ResourceSignal": {
            "Timeout": "PT15M"
          }
        },
        "UpdatePolicy": {
          "AutoScalingReplacingUpdate": {
            "WillReplace": "true"
          }
        }
      },
      "ContainerInstances": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
          "ImageId": {
            "Fn::FindInMap": [
              "AWSRegionToAMI",
              {
                "Ref": "AWS::Region"
              },
              "AMIID"
            ]
          },
          "SecurityGroups": [
            {
              "Ref": "EcsSecurityGroup"
            }
          ],
          "InstanceType": {
            "Fn::FindInMap": [
              "StageConfiguration",
              {
                "Ref": "Stage"
              },
              "InstanceType"
            ]
          },
          "IamInstanceProfile": {
            "Ref": "EC2InstanceProfile"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "echo ECS_CLUSTER=",
                  {
                    "Ref": "ECSCluster"
                  },
                  " >> /etc/ecs/ecs.config\n",
                  "yum install -y aws-cfn-bootstrap\n",
                  "/opt/aws/bin/cfn-signal -e $? ",
                  "         --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "         --resource ECSAutoScalingGroup ",
                  "         --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n"
                ]
              ]
            }
          }
        }
      },
      "service": {
        "Type": "AWS::ECS::Service",
        "DependsOn": "ALBListener",
        "Properties": {
          "Cluster": {
            "Ref": "ECSCluster"
          },
          "DesiredCount": {
            "Fn::FindInMap": [
              "StageConfiguration",
              {
                "Ref": "Stage"
              },
              "DesiredCapacity"
            ]
          },
          "HealthCheckGracePeriodSeconds": 1200,
          "LoadBalancers": [
            {
              "ContainerName": {
                "Fn::Join": [
                  "-",
                  [
                    "procyon",
                    {
                      "Ref": "Stage"
                    }
                  ]
                ]
              },
              "ContainerPort": "8080",
              "TargetGroupArn": {
                "Ref": "ECSTG"
              }
            }
          ],
          "Role": {
            "Ref": "ECSServiceRole"
          },
          "TaskDefinition": {
            "Ref": "taskdefinition"
          }
        }
      },
      "ECSServiceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ecs.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "ecs-access-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                      "elasticloadbalancing:DeregisterTargets",
                      "elasticloadbalancing:Describe*",
                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                      "elasticloadbalancing:RegisterTargets",
                      "ec2:Describe*",
                      "ec2:AuthorizeSecurityGroupIngress"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": "*",
                    "Resource": "*"
                  }
                ]
              }
            },
            {
              "PolicyName": "s3-access-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:*",
                      "s3-object-lambda:*"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            },
            {
              "PolicyName": "cognito-access-policy",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cognito:*"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "ServiceScalingTarget": {
        "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
        "DependsOn": "service",
        "Properties": {
          "MaxCapacity": 2,
          "MinCapacity": 1,
          "ResourceId": {
            "Fn::Join": [
              "",
              [
                "service/",
                {
                  "Ref": "ECSCluster"
                },
                "/",
                {
                  "Fn::GetAtt": [
                    "service",
                    "Name"
                  ]
                }
              ]
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "AutoscalingRole",
              "Arn"
            ]
          },
          "ScalableDimension": "ecs:service:DesiredCount",
          "ServiceNamespace": "ecs"
        }
      },
      "ServiceScaleUpPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {
            "Ref": "ECSAutoScalingGroup"
          },
          "Cooldown": "300",
          "ScalingAdjustment": "1"
        }
      },
      "ServiceScaleDownPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {
            "Ref": "ECSAutoScalingGroup"
          },
          "Cooldown": "60",
          "ScalingAdjustment": "-1"
        }
      },
      "CPUAlarmHigh": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmDescription": "Alarm if CPU>80% for 1 minute",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "1",
          "Threshold": "80",
          "AlarmActions": [
            {
              "Ref": "ServiceScaleUpPolicy"
            }
          ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": {
                "Ref": "ECSAutoScalingGroup"
              }
            }
          ],
          "ComparisonOperator": "GreaterThanThreshold"
        }
      },
      "CPUAlarmLow": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmDescription": "Alarm if CPU<50% for 1 minute",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "1",
          "Threshold": "50",
          "AlarmActions": [
            {
              "Ref": "ServiceScaleDownPolicy"
            }
          ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": {
                "Ref": "ECSAutoScalingGroup"
              }
            }
          ],
          "ComparisonOperator": "LessThanThreshold"
        }
      },
      "EC2Role": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "ecs-service",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:CreateCluster",
                      "ecs:DeregisterContainerInstance",
                      "ecs:DiscoverPollEndpoint",
                      "ecs:Poll",
                      "ecs:RegisterContainerInstance",
                      "ecs:StartTelemetrySession",
                      "ecs:Submit*",
                      "ecr:GetAuthorizationToken",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:BatchGetImage",
                      "ecr:GetDownloadUrlForLayer",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "AutoscalingRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "application-autoscaling.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "service-autoscaling",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "application-autoscaling:*",
                      "cloudwatch:DescribeAlarms",
                      "cloudwatch:PutMetricAlarm",
                      "ecs:DescribeServices",
                      "ecs:UpdateService"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "EC2InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [
            {
              "Ref": "EC2Role"
            }
          ]
        }
      }
    },
    "Outputs": {
      "ecsservice": {
        "Value": {
          "Ref": "service"
        }
      },
      "ecscluster": {
        "Value": {
          "Ref": "ECSCluster"
        }
      },
      "ECSALB": {
        "Description": "Your ALB DNS URL",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "ECSALB",
                  "DNSName"
                ]
              },
              {
                "Ref": "Stage"
              }
            ]
          ]
        }
      },
      "taskdef": {
        "Value": {
          "Ref": "taskdefinition"
        }
      }
    }
  }